runs:
    run_id: {                   type: 'string',  required: True,  unique: True }
    number_of_lanes: {          type: 'integer', required: False, min: 1, max: 8 }  # [1..8]
    run_elements: {             type: 'list',    required: False, schema: { type: 'string', data_relation: { resource: 'run_elements', field: 'run_element_id', embeddable: True } } }
    analysis_driver_procs: {    type: 'list',    required: False, schema: { type: 'string', data_relation: { resource: 'analysis_driver_procs', field: 'proc_id', embeddable: True } } }


lanes:
    lane_id: {                  type: 'string',  required: True,  unique: True}
    run_id: {                   type: 'string',  required: False }
    lane_number: {              type: 'integer', required: False, min: 1, max: 8 }
    run_elements: {             type: 'list',    required: False, schema: { type: 'string', data_relation: { resource: 'run_elements', field: 'run_element_id', embeddable: True } } }


run_elements:
    run_element_id: {           type: 'string',  required: True,  unique: True }

    run_id: {                   type: 'string',  required: True }
    lane: {                     type: 'integer', required: True }
    barcode: {                  type: 'string',  required: False }
    project_id: {               type: 'string',  required: True }

#   for now, treat sample_id and library_id as 1:1 equivalent
    library_id: {               type: 'string',  required: True }
    sample_id: {                type: 'string',  required: True }

    total_reads: {              type: 'integer', required: False }
    passing_filter_reads: {     type: 'integer', required: False }
    pc_reads_in_lane: {         type: 'float',   required: False }

    bases_r1: {                 type: 'integer', required: False }
    q30_bases_r1: {             type: 'integer', required: False }
    bases_r2: {                 type: 'integer', required: False }
    q30_bases_r2: {             type: 'integer', required: False }

    adaptor_bases_removed_r1: { type: 'integer', required: False }
    adaptor_bases_removed_r2: { type: 'integer', required: False }

    clean_reads: {              type: 'integer', required: False }
    clean_bases_r1: {           type: 'integer', required: False }
    clean_q30_bases_r1: {       type: 'integer', required: False }
    clean_bases_r2: {           type: 'integer', required: False }
    clean_q30_bases_r2: {       type: 'integer', required: False }

    fastqc_report_r1: {         type: 'string',  required: False }
    fastqc_report_r2: {         type: 'string',  required: False }

    reviewed: {                 type: 'string',  required: False, allowed: ['not reviewed', 'pass', 'fail'], default: 'not reviewed' }
    review_comments: {          type: 'multilinestring',  required: False }
    useable: {                  type: 'string',  required: False, allowed: ['not marked', 'yes', 'no' ], default: 'not marked' }
    useable_comments: {         type: 'multilinestring',  required: False }



unexpected_barcodes:
    run_element_id: {           type: 'string',  required: True,  unique: True }

    run_id: {                   type: 'string',  required: True }
    lane: {                     type: 'integer', required: True }
    barcode: {                  type: 'string',  required: True }
    passing_filter_reads: {     type: 'float',   required: False }
    pc_reads_in_lane: {         type: 'float',   required: False }


projects:
    project_id: {               type: 'string',  required: True,  unique: True }
    samples: {                  type: 'list',    required: False, schema: { type: 'string', data_relation: { resource: 'samples', field: 'sample_id', embeddable: False } } }


samples:
    library_id: {               type: 'string',  required: False }
    project_id: {               type: 'string',  required: True  }
    sample_id: {                type: 'string',  required: True, unique: True }
    user_sample_id: {           type: 'string',  required: False }

    #QC metrics
    bam_file_reads: {           type: 'integer', required: False }  # reads initially found in the bam file, used to be 'no adaptor reads'
    mapped_reads: {             type: 'integer', required: False }
    properly_mapped_reads: {    type: 'integer', required: False }
    duplicate_reads: {          type: 'integer', required: False }
    median_coverage: {          type: 'float',   required: False }
    coverage: {                 type: 'dict',    required: False, schema: { median: {type: 'float'}, mean: {type: 'float'}, std_dev: {type: 'float'} } }
    pc_callable: {              type: 'float',   required: False }

    #QC validation
    called_gender: {            type: 'string',  allowed: ['male', 'female', 'unknown'] }
    provided_gender: {          type: 'string',  allowed: ['male', 'female', 'unknown'] }
    gender_validation: {        type: 'dict',    schema: { hetX: { type: 'float' }, covY: { type: 'float' }, gender_genotype: { type: 'string',  allowed: ['male', 'female', 'unknown'] } } }
    genotype_validation: {      type: 'dict',    schema: { matching_snps: { type: 'integer' }, mismatching_snps: { type: 'integer' }, no_call_seq: { type: 'integer' }, no_call_chip: { type: 'integer' } } }
    species_contamination: {    type: 'dict',    required: False, schema: { percent_unmapped_focal: {type: 'float'}, percent_unmapped: {type: 'float'}, total_reads_mapped: {type: 'integer'}, contaminant_unique_mapped: {type: 'dict'} } }
    sample_contamination: {     type: 'dict',    required: False, schema: { freemix: {type: 'float'}, best_matching_samples: {type: 'dict'} } }

    #Events
    reviewed: {                 type: 'string',  required: False, allowed: ['not reviewed', 'pass', 'fail'], default: 'not reviewed' }
    review_comments: {          type: 'multilinestring',  required: False }
    useable: {                  type: 'string',  required: False, allowed: ['not marked', 'yes', 'no' ], default: 'not marked' }
    useable_comments: {         type: 'multilinestring',  required: False }
    delivered: {                type: 'string',  required: False, allowed: ['yes', 'no'], default: 'no' }
    input_fastqs_deleted: {     type: 'string',  required: False, allowed: ['yes', 'no'], default: 'no'}

    #Links
    run_elements: {             type: 'list',    required: False, schema: { type: 'string', data_relation: { resource: 'run_elements', field: 'run_element_id', embeddable: True } } }
    analysis_driver_procs: {    type: 'list',    required: False, schema: { type: 'string', data_relation: { resource: 'analysis_driver_procs', field: 'proc_id', embeddable: True } } }


analysis_driver_procs:
    proc_id: {                  type: 'string', required: True, unique: True }
    dataset_type: {             type: 'string', allowed: ['run', 'sample'], required: True }
    dataset_name: {             type: 'string', required: True }
    start_date: {               type: 'datetime' }
    end_date: {                 type: 'datetime' }
    pid: {                      type: 'integer', nullable: True}
    status: {                   type: 'string', allowed: ['force_ready', 'processing', 'finished', 'failed', 'aborted', 'reprocess', 'deleted'] }

    stages: {                   type: 'list', schema: { type: 'dict', schema: { stage_name: { type: 'string' }, date_started: { type: 'datetime' }, date_finished: { type: 'datetime' }, exit_status: { type: 'integer'} } } }
