runs:
    run_id: {                   type: 'string',  required: True,  unique: True }
    number_of_lanes: {          type: 'integer', required: False, min: 1, max: 8 }  # [1..8]
    run_elements: {             type: 'list',    required: False, schema: { type: 'string', data_relation: { resource: 'run_elements', field: 'run_element_id', embeddable: True } } }
    analysis_driver_procs: {    type: 'list',    required: False, schema: { type: 'string', data_relation: { resource: 'analysis_driver_procs', field: 'proc_id', embeddable: True } } }


lanes:
    lane_id: {                  type: 'string',  required: True,  unique: True}
    run_id: {                   type: 'string',  required: False }
    lane_number: {              type: 'integer', required: False, min: 1, max: 8 }
    run_elements: {             type: 'list',    required: False, schema: { type: 'string', data_relation: { resource: 'run_elements', field: 'run_element_id', embeddable: True } } }
    interop_metrics: {          type: 'dict',    required: False, schema: {
        pc_clust_pf_r1:        {type: 'float'},
        pc_clust_pf_stdev_r1:  {type: 'float'},
        phasing_r1:            {type: 'float'},
        prephasing_r1:         {type: 'float'},
        pc_q30_r1:             {type: 'float'},
        intensity_c1_r1:       {type: 'float'},
        intensity_c1_stdev_r1: {type: 'float'},
        pc_aligned_r1:         {type: 'float'},
        pc_aligned_stdev_r1:   {type: 'float'},
        pc_error_r1:           {type: 'float'},
        pc_error_stdev_r1:     {type: 'float'},
        yield_r1:              {type: 'float'},
        pc_clust_pf_r2:        {type: 'float'},
        pc_clust_pf_stdev_r2:  {type: 'float'},
        phasing_r2:            {type: 'float'},
        prephasing_r2:         {type: 'float'},
        pc_q30_r2:             {type: 'float'},
        intensity_c1_r2:       {type: 'float'},
        intensity_c1_stdev_r2: {type: 'float'},
        pc_aligned_r2:         {type: 'float'},
        pc_aligned_stdev_r2:   {type: 'float'},
        pc_error_r2:           {type: 'float'},
        pc_error_stdev_r2:     {type: 'float'},
        yield_r2:              {type: 'float'}
    } }

run_elements:
    run_element_id: {           type: 'string',  required: True,  unique: True }

    run_id: {                   type: 'string',  required: True }
    lane: {                     type: 'integer', required: True }
    barcode: {                  type: 'string',  required: False }
    project_id: {               type: 'string',  required: True }

#   for now, treat sample_id and library_id as 1:1 equivalent
    library_id: {               type: 'string',  required: True }
    sample_id: {                type: 'string',  required: True }

    total_reads: {              type: 'integer', required: False }
    passing_filter_reads: {     type: 'integer', required: False }
    pc_reads_in_lane: {         type: 'float',   required: False }

    bases_r1: {                 type: 'integer', required: False }
    q30_bases_r1: {             type: 'integer', required: False }
    bases_r2: {                 type: 'integer', required: False }
    q30_bases_r2: {             type: 'integer', required: False }

    adaptor_bases_removed_r1: { type: 'integer', required: False }
    adaptor_bases_removed_r2: { type: 'integer', required: False }

    lane_pc_optical_dups:     { type: 'float',   required: False }

    phix_reads: {               type: 'integer', required: False }
    clean_reads: {              type: 'integer', required: False }
    clean_bases_r1: {           type: 'integer', required: False }
    clean_q30_bases_r1: {       type: 'integer', required: False }
    clean_bases_r2: {           type: 'integer', required: False }
    clean_q30_bases_r2: {       type: 'integer', required: False }

    fastqc_report_r1: {         type: 'string',  required: False }
    fastqc_report_r2: {         type: 'string',  required: False }

    tiles_filtered: {           type: 'string',  required: False, nullable: True }
    trim_r1: {                  type: 'integer', required: False, nullable: True }
    trim_r2: {                  type: 'integer', required: False, nullable: True }

    mapping_metrics: {          type: 'dict',    required: False, schema: {
        bam_file_reads: {             type: 'integer' },
        mapped_reads: {               type: 'integer' },
        duplicate_reads: {            type: 'integer' },
        properly_mapped_reads: {      type: 'integer' },
        picard_dup_reads: {           type: 'integer' },
        picard_opt_dup_reads: {       type: 'integer' },
        picard_est_lib_size: {        type: 'integer' },
        mean_insert_size: {           type: 'float' },
        std_dev_insert_size: {        type: 'float' },
        median_insert_size: {         type: 'float' },
        median_abs_dev_insert_size: { type: 'float' },
        pc_insert_size: {             type: 'float' },
        non_fr_inserts: {             type: 'dict' }
    } }

    coverage: {                 type: 'dict',    required: False, schema: {
        median: {type: 'float'},
        mean: {type: 'float'},
        std_dev: {type: 'float'},
        coverage_percentiles: {type: 'dict', schema: {
            percentile_5:  { type: 'integer' },
            percentile_25: { type: 'integer' },
            percentile_50: { type: 'integer' },
            percentile_75: { type: 'integer' },
            percentile_95: { type: 'integer'}
        } },
        bases_at_coverage: {type: 'dict', schema: {
            bases_at_5X: {type: 'integer'},
            bases_at_15X: {type: 'integer'},
            bases_at_30X: {type: 'integer' }
        } },
        genome_size: { type: 'integer' },
        evenness: { type: 'float' }
    } }

    gc_bias: {                  type: 'dict', schema: { slope: { type: 'float' }, mean_deviation: { type: 'float' } } }

    reviewed: {                 type: 'string',  required: False, allowed: ['not reviewed', 'pass', 'fail'], default: 'not reviewed' }
    review_comments: {          type: 'string',  required: False }
    review_date: {              type: 'datetime', required: False }
    useable: {                  type: 'string',  required: False, allowed: ['not marked', 'yes', 'no' ], default: 'not marked' }
    useable_comments: {         type: 'string',  required: False }
    useable_date: {             type: 'datetime', required: False }
    useable_reviewer: {         type: 'string', required: False }


unexpected_barcodes:
    run_element_id: {           type: 'string',  required: True,  unique: True }
    run_id: {                   type: 'string',  required: True }
    lane: {                     type: 'integer', required: True }
    barcode: {                  type: 'string',  required: True }
    passing_filter_reads: {     type: 'float',   required: False }
    pc_reads_in_lane: {         type: 'float',   required: False }


projects:
    project_id: {               type: 'string',  required: True,  unique: True }
    samples: {                  type: 'list',    required: False, schema: { type: 'string', data_relation: { resource: 'samples', field: 'sample_id', embeddable: False } } }
    analysis_driver_procs: {    type: 'list',    required: False, schema: { type: 'string', data_relation: { resource: 'analysis_driver_procs', field: 'proc_id', embeddable: True } } }
    sample_pipeline: {          type: 'dict',    schema: { name: { type: 'string' }, toolset_type: { type: 'string' }, toolset_version: { type: 'integer' } } }


samples:
    library_id: {               type: 'string',  required: False }
    project_id: {               type: 'string',  required: True  }
    plate_name: {               type: 'string',  required: False }
    sample_id: {                type: 'string',  required: True, unique: True }
    user_sample_id: {           type: 'string',  required: False }
    species_name: {             type: 'string',  required: False }
    required_coverage: {        type: 'integer', required: False }
    required_yield: {           type: 'integer', required: False }
    required_yield_q30: {       type: 'integer', required: False }

    # QC metrics
    bam_file_reads: {           type: 'integer', required: False }  # reads initially found in the bam file
    mapped_reads: {             type: 'integer', required: False }
    properly_mapped_reads: {    type: 'integer', required: False }
    duplicate_reads: {          type: 'integer', required: False }
    picard_dup_reads: {         type: 'integer' }
    picard_opt_dup_reads: {     type: 'integer' }
    picard_est_lib_size: {      type: 'integer' }
    mean_insert_size: {         type: 'float' }
    std_dev_insert_size: {      type: 'float' }
    median_insert_size: {       type: 'float' }
    median_abs_dev_insert_size: { type: 'float' }
    pc_insert_size: {           type: 'float' }
    non_fr_inserts: {           type: 'dict',    required: False }
    median_coverage: {          type: 'float',   required: False }
    coverage: {                 type: 'dict',    required: False, schema: {
        median: {               type: 'float'},
        mean: {                 type: 'float'},
        std_dev: {              type: 'float'},
        coverage_percentiles: { type: 'dict', schema: {
            percentile_5: {     type: 'integer' },
            percentile_25: {    type: 'integer' },
            percentile_50: {    type: 'integer' },
            percentile_75: {    type: 'integer' },
            percentile_95: {    type: 'integer'}
        } },
        bases_at_coverage: {    type: 'dict', schema: {
            bases_at_5X: {      type: 'integer'},
            bases_at_15X: {     type: 'integer'},
            bases_at_30X: {     type: 'integer' }
        } },
        genome_size: {          type: 'integer' },
        evenness: {             type: 'float' }
    } }
    # TODO: remove pc_callable
    pc_callable: {              type: 'float',   required: False }

    # QC validation
    sex_validation: {           type: 'dict',    schema: {
        called: {               type: 'string',  allowed: ['male', 'female', 'unknown'] },
        provided: {             type: 'string',  allowed: ['male', 'female', 'unknown'] },
        hetX: { type: 'float' },
        covY: { type: 'float' }
    } }
    genotype_validation: {      type: 'dict', schema: {
        matching_snps: { type: 'integer' },
        mismatching_snps: { type: 'integer' },
        no_call_seq: { type: 'integer' },
        no_call_chip: { type: 'integer' }
    } }
    species_contamination: {    type: 'dict', required: False, schema: {
        percent_unmapped_focal: { type: 'float' },
        percent_unmapped: { type: 'float' },
        total_reads_mapped: { type: 'integer' },
        contaminant_unique_mapped: { type: 'dict' }
    } }
    sample_contamination: {     type: 'dict', required: False, schema: {
        freemix: { type: 'float'},
        best_matching_samples: { type: 'dict' },
        het_hom_ratio: { type: 'float' },
        ti_tv_ratio: { type: 'float' }
    } }

    rapid_analysis: { type: 'dict', schema: {
        reviewed: { type: 'string', allowed: ['pass', 'fail', 'not reviewed'] },
        review_comments: { type: 'string' },
        review_date: { type: 'datetime' },
        data_source: { type: 'list', schema: { type: 'string' } },
        yield: { type: 'float' },
        pc_q30: { type: 'float' },
        var_calling: { type: 'dict', schema: {
            ti_tv_ratio: { type: 'float'},
            het_hom_ratio: { type: 'float'}
        } },
        mapping: { type: 'dict', schema: {
            total_reads: { type: 'integer' },
            duplicate_reads: { type: 'integer' },
            pc_duplicates: { type: 'float' },
            mapped_reads: { type: 'integer' },
            pc_mapped: { type: 'float' },
            unique_mapped_reads: { type: 'integer' },
            pc_unique_mapped: { type: 'float' },
            mean_coverage: { type: 'float' },
            median_coverage: { type: 'float' },
            genome_size: { type: 'integer' },
            pc_genome_with_coverage: { type: 'dict', schema: {
                100+: { type: 'float' },
                50-100: { type: 'float' },
                40-50: { type: 'float' },
                30-40: { type: 'float' },
                20-30: { type: 'float' },
                10-20: { type: 'float' },
                5-10: { type: 'float' },
                2-5: { type: 'float' },
                1-2: { type: 'float' },
                0-1: { type: 'float' }
            } }
        } }
    } }

    # Events
    reviewed: {                 type: 'string',  required: False, allowed: ['not reviewed', 'genotype missing', 'pass', 'fail'], default: 'not reviewed' }
    review_comments: {          type: 'string',  required: False }
    review_date: {              type: 'datetime', required: False }
    useable: {                  type: 'string',  required: False, allowed: ['not marked', 'yes', 'no' ], default: 'not marked' }
    useable_comments: {         type: 'string',  required: False }
    useable_date: {             type: 'datetime', required: False }
    useable_reviewer: {         type: 'string', required: False }
    delivered: {                type: 'string',  required: False, allowed: ['yes', 'no'], default: 'no' }
    delivery_date: {            type: 'datetime', required: False }
    files_delivered: {          type: 'list', required: False, 'schema': { 'type': 'dict', 'schema': { 'file_path': { 'type': 'string' }, 'md5': { 'type': 'string' }, 'size': { 'type': 'integer' } } } }
    files_downloaded: {         type: 'list', required: False, 'schema': { 'type': 'dict', 'schema': { 'file_path': { 'type': 'string' }, 'user': { 'type': 'string' }, 'date': { type: 'datetime' }, 'size': { 'type': 'integer' } } } }
    input_fastqs_deleted: {     type: 'string',  required: False, allowed: ['yes', 'no'], default: 'no'}
    data_deleted: {             type: 'string',  required: False, allowed: ['all', 'fastq', 'processed', 'on lustre', 'none'], default: 'none'}

    # Links
    run_elements: {             type: 'list',    required: False, schema: { type: 'string', data_relation: { resource: 'run_elements', field: 'run_element_id', embeddable: True } } }
    analysis_driver_procs: {    type: 'list',    required: False, schema: { type: 'string', data_relation: { resource: 'analysis_driver_procs', field: 'proc_id', embeddable: True } } }


analysis_driver_procs:
    proc_id: {                  type: 'string', required: True, unique: True }
    dataset_type: {             type: 'string', allowed: ['run', 'sample', 'project'], required: True }
    dataset_name: {             type: 'string', required: True }
    pipeline_used: {            type: 'dict', schema: { name: { type: 'string' }, toolset_type: { type: 'string' }, toolset_version: { type: 'integer' } } }
    start_date: {               type: 'datetime' }
    end_date: {                 type: 'datetime' }
    pid: {                      type: 'integer', nullable: True }
    status: {                   type: 'string', allowed: ['force_ready', 'processing', 'finished', 'failed', 'aborted', 'reprocess', 'deleted', 'resume'] }
    stages: {                   type: 'list', schema: { type: 'string', data_relation: { resource: 'analysis_driver_stages', field: 'stage_id', embeddable: True } } }
    data_source: {              type: 'list',  required: False, schema: { type: 'string' } }
    genome_used: {              type: 'string' }  # TODO: this should be stored in samples when doing #112


analysis_driver_stages:
    stage_id: {                 type: 'string', required: True, unique: True }
    analysis_driver_proc: {     type: 'string', required: True }
    stage_name: {               type: 'string', required: True }
    date_started: {             type: 'datetime', required: True }
    date_finished: {            type: 'datetime', nullable: True }
    exit_status: {              type: 'integer', nullable: True }


actions:
    action_id: {                type: 'string', required: True, unique: True }
    action_type: {              type: 'string', required: True }
    started_by: {               type: 'string', required: True }
    date_started: {             type: 'datetime', required: True }
    date_finished: {            type: 'datetime' }
    action_info: {              type: 'dict' }


species:
    name: {                     type: 'string', required: True, unique: True }
    genomes: {                  type: 'list',   schema: { type: 'string', data_relation: { resource: 'genomes', field: 'assembly_name', embeddable: True } } }
    default_version: {          type: 'string' }
    taxid: {                    type: 'string' }
    approximate_genome_size: {  type: 'float' }  # genome size in Mb


genomes:
    assembly_name: {            type: 'string', required: True, unique: True }
    species: {                  type: 'string' }
    data_files: {               type: 'dict', schema: { fasta: { type: 'string' }, variation: { type: 'string' }, vqsr: { type: 'dict' } } }
    snpEff: {                   type: 'string' }
    data_source: {              type: 'string' }
    tools_used: {               type: 'dict' }
    date_added: {               type: 'datetime' }
    chromosome_count: {         type: 'integer' }
    genome_size: {              type: 'integer' }
    goldenpath: {               type: 'integer' }
    project_whitelist: {        type: 'list', schema: { type: 'string' } }
    comments: {                 type: 'string' }
    analyses_supported: {       type: 'list', schema: { type: 'string', allowed: ['qc', 'variant_calling', 'bcbio'] } }
